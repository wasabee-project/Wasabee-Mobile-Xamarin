# Xamarin.iOS
# Build a Xamarin.iOS project.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

name: $(MajorVersion).$(MinorVersion).$(Rev:rr)
trigger:
- master

pool:
  vmImage: 'macos-latest'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'

steps:

# Install signing cert and provisioning profile
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: '$(P12File)'
    certPwd: '$(P12Password)'
    keychain: 'temp'
    deleteCert: true
- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: '$(ProvisioningProfile)'
    removeProfile: true

# To manually select a Xamarin SDK version on the Microsoft-hosted macOS agent,
# configure this task with the *Mono* version that is associated with the
# Xamarin SDK version that you need, and set the "enabled" property to true.
# See https://go.microsoft.com/fwlink/?linkid=871629
- script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 5_12_0
  displayName: 'Select the Xamarin SDK version'
  enabled: false

# NuGet Tool install
- task: NuGetToolInstaller@1

# NuGet packages restore
- task: NuGetCommand@2
  inputs:
    restoreSolution: '**/Build.iOS.sln'

# Bump iOS version
- task: ios-bundle-version@1
  inputs:
    sourcePath: '$(build.SourcesDirectory)/Rocks.Wasabee.Mobile.iOS/Info.plist'
    versionCodeOption: 'timestamp'
    versionName: '$(Build.BuildNumber)'
    printFile: true

# Build Xamarin.iOS app
- task: XamariniOS@2
  inputs:
    solutionFile: '**/Build.iOS.sln'
    configuration: '$(buildConfiguration)'
    buildForSimulator: false
    packageApp: true
    signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'

# Copy .ipa to Artifacts
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(build.SourcesDirectory)'
    Contents: '**/*.ipa'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true
    OverWrite: true
    flattenFolders: true

# Publish artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

