<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Global_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="SignIn_Button_Cancel" xml:space="preserve">
    <value>✗   Cancel</value>
  </data>
  <data name="SignIn_Button_ChangeAccount" xml:space="preserve">
    <value>Change account</value>
    <comment>Text for change account button</comment>
  </data>
  <data name="SignIn_Button_ChangeServer" xml:space="preserve">
    <value>Change server</value>
    <comment>Text for changing server button</comment>
  </data>
  <data name="SignIn_Button_Next" xml:space="preserve">
    <value>✓   Next</value>
  </data>
  <data name="SignIn_Button_OneTimeToken" xml:space="preserve">
    <value>Use One Time Token</value>
    <comment>Text for the "One time token" button</comment>
  </data>
  <data name="SignIn_Button_Retry" xml:space="preserve">
    <value>Retry</value>
    <comment>Text for retry button</comment>
  </data>
  <data name="SignIn_Button_Validate" xml:space="preserve">
    <value>✓   Validate</value>
  </data>
  <data name="SignIn_Button_WithGoogle" xml:space="preserve">
    <value>Sign in with Google</value>
    <comment>Text for the "Sign In with Google" button</comment>
  </data>
  <data name="SignIn_Label_EnterToken" xml:space="preserve">
    <value>Enter the token :</value>
    <comment>Text above one time token entry field</comment>
  </data>
  <data name="SignIn_Label_ErrorMsg_GoogleError" xml:space="preserve">
    <value>Google login failed !</value>
    <comment>Logging in Google servers failed</comment>
  </data>
  <data name="SignIn_Label_ErrorMsg_Internal" xml:space="preserve">
    <value>Internal error</value>
  </data>
  <data name="SignIn_Label_ErrorMsg_LoadingOpsData" xml:space="preserve">
    <value>Error loading Wasabee OPs data</value>
  </data>
  <data name="SignIn_Label_ErrorMsg_WasabeeFail" xml:space="preserve">
    <value>Wasabee login failed !</value>
    <comment>Logging in Wasabee server failed</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_AppLoading" xml:space="preserve">
    <value>Application loading...</value>
    <comment>Loading step </comment>
  </data>
  <data name="SignIn_Label_LoadingStep_ContactingServer" xml:space="preserve">
    <value>Contacting '{0}' Wasabee server...</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_GoogleSuccess" xml:space="preserve">
    <value>Google login success...</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_LoadingData" xml:space="preserve">
    <value>Harvesting beehive,</value>
    <comment>Final Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_LoggingIn" xml:space="preserve">
    <value>Logging in...</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_SelectServer" xml:space="preserve">
    <value>Choose your server :</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_SelectServerToken" xml:space="preserve">
    <value>Choose token's server :</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_LoadingStep_WelcomeAgent" xml:space="preserve">
    <value>Welcome {0}</value>
    <comment>Loading step</comment>
  </data>
  <data name="SignIn_Label_NoInternet" xml:space="preserve">
    <value>You must be connected to Internet over Wi-Fi or cellular network to use this application</value>
    <comment>Error message when no internet connection</comment>
  </data>
  <data name="SignIn_Label_NoTeamsOrOperation" xml:space="preserve">
    <value>You don't have any assigned team or operation, contact your Operator before using Wasabee Mobile !</value>
    <comment>Text for when user don't have any teams or ops and can't use app</comment>
  </data>
  <data name="SignIn_Label_PleaseWait" xml:space="preserve">
    <value>Please wait...</value>
  </data>
  <data name="SignIn_Label_RememberServerChoice" xml:space="preserve">
    <value>Remember my choice (quick login if enabled)</value>
    <comment>Text for the quicklogin checkbox</comment>
  </data>
  <data name="SignIn_Label_Warning" xml:space="preserve">
    <value>Attention please !</value>
    <comment>Text for when user attention is required after login</comment>
  </data>
  <data name="Toasts_LoadingOpsInBackground" xml:space="preserve">
    <value>Your OPs are loading in background</value>
    <comment>Toast message</comment>
  </data>
  <data name="Toasts_LoadingOpsSuccess" xml:space="preserve">
    <value>OPs loaded succesfully</value>
    <comment>Toast message</comment>
  </data>
</root>